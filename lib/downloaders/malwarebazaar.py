import io
import logging

import pyzipper
import requests

from lib.cuckoo.common.config import Config

integrations_cfg = Config("integrations")

log = logging.getLogger(__name__)

_bazaar_map = {
    32: "md5_hash",
    40: "sha1_hash",
    64: "sha256_hash",
}


def is_supported(hash: str, apikey: str = "") -> bool:
    """
    Checks if the hash is supported by the MalwareBazaar service.

    Args:
        hash (str): The hash to check.

    Returns:
        bool: True if the hash is supported by MalwareBazaar, False otherwise.
    """

    if len(hash) not in (32, 40, 64):
        log.error("%s is not a valid hash for MalwareBazaar", hash)
        return False
    elif not integrations_cfg.abusech.apikey and not apikey:
        log.error("MalwareBazaar API key not configured. Configure it in integrations.conf")
        return False

    return True


def download(hash: str, apikey: str = "") -> bytes:
    """
    Downloads a malware sample from MalwareBazaar using the provided hash and API key.

    Args:
        hash (str): The hash of the malware sample to download. Can be MD5, SHA1, or SHA256.
        apikey (str, optional): The API key for accessing MalwareBazaar. Defaults to an empty string.

    Returns:
        bytes: The downloaded malware sample as bytes. Returns an empty byte string if the download fails or the file is not found.
    """

    sample = b""
    try:
        data = requests.post(
            "https://mb-api.abuse.ch/api/v1/",
            data={"query": "get_file", _bazaar_map[len(hash)]: hash},
            headers={"API-KEY": integrations_cfg.abusech.apikey or apikey, "User-Agent": "CAPE Sandbox"},
        )
        if data.ok:
            try:
                if isinstance(data.content, bytes):
                    if b"file_not_found" in data.content[:50]:
                        return sample
                    tmp_sample = io.BytesIO(data.content)
                elif isinstance(data.content, io.BytesIO):
                    tmp_sample = data.content
                else:
                    return sample
                with pyzipper.AESZipFile(tmp_sample) as zf:
                    zf.setpassword(b"infected")
                    sample = zf.read(zf.namelist()[0])
            except pyzipper.zipfile.BadZipFile:
                log.error("malwarebazaar_dl: %s", str(data.content[:100]))
    except Exception as e:
        log.exception(e)

    return sample
